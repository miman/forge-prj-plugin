/**
 * 
 */
package ${path}.facet;

import java.io.StringWriter;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.maven.model.Dependency;
import org.apache.maven.model.Model;
import org.apache.velocity.VelocityContext;
import org.apache.velocity.app.VelocityEngine;
import org.apache.velocity.runtime.RuntimeConstants;
import org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader;
import org.jboss.forge.maven.MavenCoreFacet;
import org.jboss.forge.project.facets.DependencyFacet;
import org.jboss.forge.project.facets.JavaSourceFacet;
import org.jboss.forge.project.facets.ResourceFacet;
import org.jboss.forge.resources.FileResource;
import org.jboss.forge.shell.plugins.Alias;
import org.jboss.forge.shell.plugins.RequiresFacet;

import se.miman.forge.plugin.util.MimanBaseFacet;
import se.miman.forge.plugin.util.VelocityUtil;
import se.miman.forge.plugin.util.helpers.DomFileHelper;
import se.miman.forge.plugin.util.helpers.DomFileHelperImpl;

@Alias("${alias}-facet")
@RequiresFacet({ MavenCoreFacet.class, JavaSourceFacet.class,
		DependencyFacet.class })
public class ${class-name}Facet extends MimanBaseFacet {

	DomFileHelper domFileHelper;

	private final VelocityEngine velocityEngine;
	private VelocityUtil velocityUtil;

	public ${class-name}Facet() {
		super();
		domFileHelper = new DomFileHelperImpl();
		
		velocityUtil = new VelocityUtil();
		
		velocityEngine = new VelocityEngine();
		velocityEngine.setProperty(RuntimeConstants.RESOURCE_LOADER,
				"classpath");
		velocityEngine.setProperty("classpath.resource.loader.class",
				ClasspathResourceLoader.class.getName());
		velocityEngine.setProperty(
				RuntimeConstants.RUNTIME_LOG_LOGSYSTEM_CLASS,
				"org.apache.velocity.runtime.log.JdkLogChute");
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.jboss.forge.project.Facet#install()
	 */
	@Override
	public boolean install() {
		configureProject();
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.jboss.forge.project.Facet#isInstalled()
	 */
	@Override
	public boolean isInstalled() {
		final MavenCoreFacet mvnFacet = project.getFacet(MavenCoreFacet.class);
		Model pom = mvnFacet.getPOM();

		List<Dependency> deps = pom.getDependencies();
		boolean dependenciesOk = false;
		for (Dependency dependency : deps) {
			if (dependency.getGroupId().equals("log4j") && dependency.getArtifactId().equals("log4j")) {
				dependenciesOk = true;
			}
			// TODO more checks should be added here
		}
		
		return dependenciesOk;
	}

	// Helper functions ****************************************
	/**
	 * Configures the project to be a JBoss Forge plugin project.
	 * Adds the necessary dependencies to the pom.xml file.
	 * Creates the Forge.xml file
	 */
	private void configureProject() {
		final MavenCoreFacet mvnFacet = project.getFacet(MavenCoreFacet.class);
		Model pom = mvnFacet.getPOM();

		mergePomFileWithTemplate(pom);
		mvnFacet.setPOM(pom);
		
		createForgeXmlFile(pom.getProjectDirectory().getAbsolutePath());
	}

	/**
	 * Creates the forge.xml.
	 * We need this to be able to have a dependency to the miman-forge-plugin-util-impl project.
	 */
	private void createForgeXmlFile(String prjAbsolutePath) {
		String sourceUri = "/template-files/META-INF/forge.xml";
		String targetUri = "src/main/resources/META-INF/forge.xml";
		
		Map<String, Object> velocityPlaceholderMap = new HashMap<String, Object>();
//		velocityPlaceholderMap.put("groupId", pom.getGroupId());

		VelocityContext velocityContext = velocityUtil
				.createVelocityContext(velocityPlaceholderMap);
		createResourceAbsolute(sourceUri, velocityContext, targetUri);
	}
	
	@Override
	protected String getTargetPomFilePath() {
		return "/template-files/pom.xml";
	}

	/**
	 * Stores the template file as the target file after running a velocity
	 * merge on the template file.
	 * 
	 * @param templateFilePath
	 *            The template file to store after replacing all velocity
	 *            placeholders
	 * @param velocityContext
	 *            The velocity placeholder mappings
	 * @param targetFilePath
	 *            The target file path + name
	 * @return The target file
	 */
	public FileResource<?> createResourceAbsolute(String templateFilePath,
			VelocityContext velocityContext, String targetFilePath) {
		ResourceFacet resources = project.getFacet(ResourceFacet.class);

		StringWriter stringWriter = new StringWriter();
		velocityEngine.mergeTemplate(templateFilePath, "UTF-8", velocityContext,
				stringWriter);

		System.out.println("Storing file in: " + targetFilePath);
		FileResource<?> createdResource = resources.createResource(stringWriter
				.toString().toCharArray(), targetFilePath);
		return createdResource;
	}
}
